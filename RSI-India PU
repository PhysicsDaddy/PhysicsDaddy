import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit


# === 1. Load LAB HI Spectrum ===
file_path = r"D:\03_Research_Papers\00_RSI_N.Roy\215.txt"

with open(file_path, 'r') as f:
    lines = f.readlines()

start_index = next(i for i, line in enumerate(lines) if line.strip().startswith('-') or line.strip()[0].isdigit())
data = np.loadtxt(lines[start_index:], usecols=(0, 1))
velocity = data[:, 0]
intensity = data[:, 1]

# === 2. Crop to desired velocity range ===
v_min, v_max = 20,55
mask = (velocity >= v_min) & (velocity <= v_max)
v_crop = velocity[mask]
i_crop = intensity[mask]

# === 3. Define multi-Gaussian function ===
def multi_gaussian(x, *params):
    y = np.zeros_like(x)
    for i in range(0, len(params), 3):
        A = params[i]
        mu = params[i+1]
        sigma = params[i+2]
        y += A * np.exp(-((x - mu)**2) / (2 * sigma**2))
    return y


# === 4. Initial guesses ===
initial_guess = [
 

    85,10,5,
    80,20,9,
    90,30,5
    
    
      

    # G1: A, mu, sigma
   


]

# === 5. Fit using curve_fit ===
popt, pcov = curve_fit(multi_gaussian, v_crop, i_crop, p0=initial_guess, maxfev=2000)

# === 6. Extract fitted parameters ===
n_gauss = len(popt) // 3
gaussians = []
for i in range(n_gauss):
    A, mu, sigma = popt[i*3:(i+1)*3]
    gaussians.append((A, mu, sigma))
    print(f"G{i+1}: A = {A:.2f}, Î¼ = {mu:.2f}, Ïƒ = {sigma:.2f}")

# === 7. Compute fit, residuals, chi-square ===
g_total = multi_gaussian(v_crop, *popt)
residual = i_crop - g_total
dof = len(i_crop) - len(popt)
chi2_red = np.sum(residual**2) / dof
print(f"ðŸ“‰ Reduced Chi-square: {chi2_red:.3f}")

# === 8. Terminal velocity ===
mu_term = max(gaussians, key=lambda g: g[1])[1]
print(f"ðŸ“Œ Terminal velocity (Î¼_term): {mu_term:.2f} km/s")

# === 9. Plot ===
plt.figure(figsize=(10, 6))
plt.plot(v_crop, i_crop, label="Observed Spectrum", lw=2)
plt.plot(v_crop, g_total, label="Total Gaussian Fit", lw=2)

# Plot individual Gaussians
for i, (A, mu, sigma) in enumerate(gaussians):
    g = A * np.exp(-((v_crop - mu)**2) / (2 * sigma**2))
    plt.plot(v_crop, g, '--', label=f"G{i+1}: Î¼={mu:.2f}")

plt.xlabel("Velocity (km/s)")
plt.ylabel("T_B (K)")
plt.title("Automated 3-Gaussian Fit â€” l=21.5Â°, b=0Â°")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

print(f"Max T_b (data): {np.max(i_crop):.2f} K")
print(f"Max T_b (fit): {np.max(g_total):.2f} K")
